{{- if not .Values.db.external.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Namespace }}-db
  labels:
    app: {{ .Release.Namespace }}-db
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: {{ .Release.Namespace }}-db
  template:
    metadata:
      annotations:
      {{- if and (.Values.db.tolerations) (semverCompare "<1.6-0" .Capabilities.KubeVersion.GitVersion) }}
        scheduler.alpha.kubernetes.io/tolerations: '{{ toJson .Values.db.tolerations }}'
      {{- end }}
      labels:
        app: {{ .Release.Namespace }}-db
      name: {{ .Release.Namespace }}-db
    spec:
      serviceAccount: {{ .Release.Namespace }}-sa
      containers:
      - name: {{ .Release.Namespace }}-db
        securityContext:
          {{- toYaml .Values.db.securityContext | nindent 12 }}
        image: {{ .Values.imageCredentials.repositoryUriPrefix }}/{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}
        imagePullPolicy: {{ .Values.db.image.pullPolicy }}
        env:
        {{- if .Values.db.passwordSecret }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.dbPasswordName }}
              key: {{ .Values.db.dbPasswordKey }}
        {{- else }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Namespace }}-db
              key: password
        {{- end }}
        - name: PGDATA
          value: "/var/lib/postgresql/data/db-files"
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        {{- include "server.extraEnvironmentVars" .Values.db | nindent 8 }}
        {{- include "server.extraSecretEnvironmentVars" .Values.db | nindent 8 }}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db
        ports:
        - containerPort: 5432
          protocol: TCP
{{- with .Values.db.livenessProbe }}
        livenessProbe:
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.db.readinessProbe }}
        readinessProbe:
{{ toYaml . | indent 10 }}
{{- end }}
        resources:
{{ toYaml .Values.db.resources | indent 10 }}
      {{- with .Values.db.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.db.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- if and (.Values.db.tolerations) (semverCompare "^1.6-0" .Capabilities.KubeVersion.GitVersion) }}
      tolerations:
{{ toYaml .Values.db.tolerations | indent 6 }}
      {{- end }}
      volumes:
      - name: postgres-db
        persistentVolumeClaim:
          claimName: {{ .Release.Namespace }}-db-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Namespace }}-audit-db
  labels:
    app: {{ .Release.Namespace }}-audit-db
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: {{ .Release.Namespace }}-audit-db
  template:
    metadata:
      annotations:
      {{- if and (.Values.db.tolerations) (semverCompare "<1.6-0" .Capabilities.KubeVersion.GitVersion) }}
        scheduler.alpha.kubernetes.io/tolerations: '{{ toJson .Values.db.tolerations }}'
      {{- end }}
      labels:
        app: {{ .Release.Namespace }}-audit-db
      name: {{ .Release.Namespace }}-audit-db
    spec:
      serviceAccount: {{ .Release.Namespace }}-sa
      containers:
      - name: aqua-audit-db
        securityContext:
          {{- toYaml .Values.db.securityContext | nindent 12 }}
        image: "{{ .Values.imageCredentials.repositoryUriPrefix }}/{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
        imagePullPolicy: "{{ .Values.db.image.pullPolicy }}"
        env:
        {{- if .Values.db.passwordSecret }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.db.dbPasswordName }}
              key: {{ .Values.db.dbPasswordKey }}
        {{- else }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Namespace }}-audit-db
              key: password
        {{- end }}
        - name: PGDATA
          value: "/var/lib/postgresql/data/db-files"
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        {{- include "server.extraEnvironmentVars" .Values.db | nindent 8 }}
        {{- include "server.extraSecretEnvironmentVars" .Values.db | nindent 8 }}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db
        ports:
        - containerPort: 5432
          protocol: TCP
{{- with .Values.db.livenessProbe }}
        livenessProbe:
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.db.readinessProbe }}
        readinessProbe:
{{ toYaml . | indent 10 }}
{{- end }}
        resources:
{{ toYaml .Values.db.resources | indent 10 }}
      {{- with .Values.db.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.db.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- if and (.Values.db.tolerations) (semverCompare "^1.6-0" .Capabilities.KubeVersion.GitVersion) }}
      tolerations:
{{ toYaml .Values.db.tolerations | indent 6 }}
      {{- end }}
      volumes:
      - name: postgres-db
        persistentVolumeClaim:
          claimName: {{ .Release.Namespace }}-audit-db-pvc
{{- end }}
